@use "sass:math";
@use "sass:map";
@use "variables" as *;

// Responsive breakpoint mixins
@mixin breakpoint-up($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @error "Invalid breakpoint: #{$breakpoint}. Available breakpoints are: #{map.keys($breakpoints)}";
  }
}

@mixin breakpoint-down($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (max-width: (map.get($breakpoints, $breakpoint) - 1)) {
      @content;
    }
  } @else {
    @error "Invalid breakpoint: #{$breakpoint}. Available breakpoints are: #{map.keys($breakpoints)}";
  }
}

// Alias for Bootstrap compatibility
@mixin media-breakpoint-down($breakpoint) {
  @include breakpoint-down($breakpoint) {
    @content;
  }
}

@mixin media-breakpoint-up($breakpoint) {
  @include breakpoint-up($breakpoint) {
    @content;
  }
}

@mixin breakpoint-between($lower, $upper) {
  @if map.has-key($breakpoints, $lower) and map.has-key($breakpoints, $upper) {
    @media (min-width: map.get($breakpoints, $lower)) and (max-width: (map.get($breakpoints, $upper) - 1)) {
      @content;
    }
  } @else {
    @error "Invalid breakpoints: #{$lower} or #{$upper}. Available breakpoints are: #{map.keys($breakpoints)}";
  }
}

// Typography mixins
@mixin font-size($size, $line-height: null) {
  font-size: $size;
  @if $line-height {
    line-height: $line-height;
  }
}

@mixin heading($level) {
  @if $level == 1 {
    font-size: $h1-font-size;
    font-weight: $font-weight-bold;
    line-height: $line-height-sm;
    margin-bottom: $spacer;
  } @else if $level == 2 {
    font-size: $h2-font-size;
    font-weight: $font-weight-bold;
    line-height: $line-height-sm;
    margin-bottom: $spacer;
  } @else if $level == 3 {
    font-size: $h3-font-size;
    font-weight: $font-weight-medium;
    line-height: $line-height-sm;
    margin-bottom: $spacer * 0.75;
  } @else if $level == 4 {
    font-size: $h4-font-size;
    font-weight: $font-weight-medium;
    line-height: $line-height-base;
    margin-bottom: $spacer * 0.5;
  } @else if $level == 5 {
    font-size: $h5-font-size;
    font-weight: $font-weight-medium;
    line-height: $line-height-base;
    margin-bottom: $spacer * 0.5;
  } @else if $level == 6 {
    font-size: $h6-font-size;
    font-weight: $font-weight-medium;
    line-height: $line-height-base;
    margin-bottom: $spacer * 0.5;
  } @else {
    @error "Invalid heading level: #{$level}. Valid levels are 1-6.";
  }
}

// Layout mixins
@mixin clearfix {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

@mixin container {
  width: 100%;
  padding-right: math.div($grid-gutter-width, 2);
  padding-left: math.div($grid-gutter-width, 2);
  margin-right: auto;
  margin-left: auto;
  max-width: $container-max-width;
}

@mixin row {
  display: flex;
  flex-wrap: wrap;
  margin-right: math.div($grid-gutter-width, -2);
  margin-left: math.div($grid-gutter-width, -2);
}

@mixin column($size, $columns: $grid-columns) {
  flex: 0 0 math.percentage(math.div($size, $columns));
  max-width: math.percentage(math.div($size, $columns));
  padding-right: math.div($grid-gutter-width, 2);
  padding-left: math.div($grid-gutter-width, 2);
}

@mixin column-offset($size, $columns: $grid-columns) {
  margin-left: math.percentage(math.div($size, $columns));
}

// Utility mixins
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin img-fluid {
  max-width: 100%;
  height: auto;
}

@mixin img-retina($file-1x, $file-2x, $width-1x, $height-1x) {
  background-image: url($file-1x);
  background-size: $width-1x $height-1x;
  
  @media only screen and (-webkit-min-device-pixel-ratio: 2),
         only screen and (min-resolution: 192dpi) {
    background-image: url($file-2x);
  }
}

// Accessibility mixins
@mixin focus-outline {
  outline: 3px solid $primary;
  outline-offset: 2px;
}

// Component-specific mixins
@mixin card {
  background-color: $white;
  border-radius: $border-radius;
  box-shadow: $box-shadow-sm;
  padding: $spacer;
}

@mixin button-variant($background, $border, $hover-background, $hover-border, $active-background, $active-border) {
  color: color-contrast($background);
  background-color: $background;
  border-color: $border;

  &:hover {
    color: color-contrast($hover-background);
    background-color: $hover-background;
    border-color: $hover-border;
  }

  &:focus,
  &:active {
    color: color-contrast($active-background);
    background-color: $active-background;
    border-color: $active-border;
    box-shadow: 0 0 0 0.25rem rgba($background, 0.5);
  }
}

// Helper function for determining contrasting text color
@function color-contrast($background) {
  $luminance: (0.299 * red($background) + 0.587 * green($background) + 0.114 * blue($background)) / 255;
  @if $luminance > 0.5 {
    @return $dark;
  } @else {
    @return $white;
  }
}

// Transition mixins
@mixin transition($transition...) {
  transition: $transition;
}

@mixin transition-all($duration: 0.2s, $ease: ease-in-out) {
  transition: all $duration $ease;
}

// Transform mixins
@mixin transform($transforms) {
  transform: $transforms;
}

@mixin rotate($degrees) {
  @include transform(rotate($degrees));
}

@mixin scale($scale) {
  @include transform(scale($scale));
}

@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

// Animation mixins
@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}

@mixin animation($animation) {
  animation: $animation;
}

// Flexbox mixins
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

// Text truncation
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
} 